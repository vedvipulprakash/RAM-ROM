//MODULE
module single_port_ram (
    input wire [7:0] data,      // 8-bit data input
    input wire [7:0] addr,      // 8-bit address input
    input wire we,              // Write enable
    input wire clk,             // Clock
    output reg [7:0] q          // 8-bit data output
);
    // RAM memory array
    reg [7:0] ram [255:0];
    
    always @(posedge clk) begin
        if (we) begin
            ram[addr] <= data;  // Write data to RAM
        end
        q <= ram[addr];         // Read data from RAM
    end
endmodule


//Test benche

module tb_single_port_ram;
    reg [7:0] data;
    reg [7:0] addr;
    reg we;
    reg clk;
    wire [7:0] q;
    
    // Instantiate the RAM module
    single_port_ram ram_inst (
        .data(data),
        .addr(addr),
        .we(we),
        .clk(clk),
        .q(q)
    );
  
  initial begin
    $monitor("At time %0t: data = %b, addr = %b, we = %b, q = %b", $time, data, addr, we, q);
    end
  
    
    // Generate clock signal
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 10ns clock period
    end
    
    // Test sequence
    initial begin
        // Initialize inputs
        data = 8'h00;
        addr = 8'h00;
        we = 0;
        
        // Write data to address 0
        #10;
        data = 8'hAA;
        addr = 8'h00;
        we = 1;
        #10;
        we = 0;
        
        // Write data to address 1
        #10;
        data = 8'hBB;
        addr = 8'h01;
        we = 1;
        #10;
        we = 0;
        
        // Read data from address 0
        #10;
        addr = 8'h00;
        
        // Read data from address 1
        #10;
        addr = 8'h01;
      
        
        // End simulation
        #20;
        $finish;
    end
endmodule
